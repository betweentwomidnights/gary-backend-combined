#!/bin/bash

# Install PostgreSQL 13
echo "Installing PostgreSQL 13..."
sudo apt update
sudo apt install -y postgresql-13

# Start and enable PostgreSQL service
echo "Starting PostgreSQL service..."
sudo systemctl start postgresql
sudo systemctl enable postgresql

# Create database and user
echo "Creating database and user..."
sudo -u postgres psql << EOF
CREATE DATABASE gary4beatbox WITH ENCODING='UTF8' LC_COLLATE='C.UTF-8' LC_CTYPE='C.UTF-8';
CREATE USER gary WITH PASSWORD 'Schmoetry13';
GRANT ALL PRIVILEGES ON DATABASE gary4beatbox TO gary;
EOF

# Create schema
echo "Creating schema..."
sudo -u postgres psql -d gary4beatbox << EOF
-- Create user_points table
CREATE TABLE user_points (
    user_id text PRIMARY KEY,
    points integer NOT NULL DEFAULT 0,
    last_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);

-- Create points_history table
CREATE TABLE points_history (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id text NOT NULL,
    amount integer NOT NULL,
    reason text NOT NULL,
    timestamp timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user_points(user_id)
);
CREATE INDEX idx_points_history_user_id ON points_history(user_id);

-- Create user_google_auth table
CREATE TABLE user_google_auth (
    user_id text PRIMARY KEY,
    google_email text NOT NULL UNIQUE,
    linked_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user_points(user_id)
);
CREATE INDEX idx_google_email ON user_google_auth(google_email);

-- Grant permissions to gary user
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gary;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO gary;
EOF

echo "Database setup complete!"


The gary-points-admin stuff:

#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to show usage
show_help() {
    echo -e "${BLUE}Gary Points Admin Tool${NC}"
    echo "Usage:"
    echo "  gary-points-admin lookup <user_id>          - Look up user's points and recent history"
    echo "  gary-points-admin lookup-email <email>      - Look up user by Google email"
    echo "  gary-points-admin top                       - Show top 10 users by points"
    echo "  gary-points-admin adjust <user_id> <amount> - Adjust user's points (positive or negative)"
    echo "  gary-points-admin stats                     - Show general statistics"
}

# Function to look up user
lookup_user() {
    local user_id=$1
    echo -e "${GREEN}User Details:${NC}"
    sudo -u postgres psql gary4beatbox -c "
        SELECT up.user_id, up.points, up.last_updated, uga.google_email 
        FROM user_points up 
        LEFT JOIN user_google_auth uga ON up.user_id = uga.user_id
        WHERE up.user_id = '$user_id';"
    
    echo -e "\n${GREEN}Recent History:${NC}"
    sudo -u postgres psql gary4beatbox -c "
        SELECT timestamp, amount, reason 
        FROM points_history 
        WHERE user_id = '$user_id' 
        ORDER BY timestamp DESC 
        LIMIT 5;"
}

# Function to look up user by email
lookup_by_email() {
    local email=$1
    echo -e "${GREEN}Looking up user by email: $email${NC}"
    local user_id=$(sudo -u postgres psql gary4beatbox -tAc "
        SELECT user_id FROM user_google_auth WHERE google_email = '$email';")
    
    if [ -z "$user_id" ]; then
        echo -e "${GREEN}No user found with email: $email${NC}"
        return
    fi
    
    lookup_user "$user_id"
}

# Function to show top users
show_top() {
    echo -e "${GREEN}Top 10 Users by Points:${NC}"
    sudo -u postgres psql gary4beatbox -c "
        SELECT up.user_id, up.points, up.last_updated, uga.google_email 
        FROM user_points up 
        LEFT JOIN user_google_auth uga ON up.user_id = uga.user_id
        ORDER BY points DESC 
        LIMIT 10;"
}

# Function to adjust points
adjust_points() {
    local user_id=$1
    local amount=$2
    echo -e "${GREEN}Adjusting points for user $user_id by $amount${NC}"
    sudo -u postgres psql gary4beatbox << EOL
    BEGIN;
    INSERT INTO points_history (user_id, amount, reason)
    VALUES ('$user_id', $amount, 'Manual adjustment');
    
    UPDATE user_points 
    SET points = points + $amount,
        last_updated = CURRENT_TIMESTAMP
    WHERE user_id = '$user_id';
    COMMIT;
EOL
    
    echo -e "\n${GREEN}Updated user details:${NC}"
    lookup_user $user_id
}

# Function to show statistics
show_stats() {
    echo -e "${GREEN}General Statistics:${NC}"
    sudo -u postgres psql gary4beatbox << EOL
    SELECT 
        COUNT(DISTINCT up.user_id) as total_users,
        COUNT(DISTINCT uga.google_email) as google_linked_users,
        SUM(points) as total_points,
        AVG(points)::integer as average_points
    FROM user_points up
    LEFT JOIN user_google_auth uga ON up.user_id = uga.user_id;
    
    SELECT 
        DATE(timestamp)::text as date,
        COUNT(*) as actions,
        SUM(amount) as points_changed
    FROM points_history
    WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days'
    GROUP BY DATE(timestamp)
    ORDER BY date DESC;
EOL
}

# Main script logic
case "$1" in
    "lookup")
        if [ -z "$2" ]; then
            echo "Error: Please provide a user_id"
            show_help
            exit 1
        fi
        lookup_user $2
        ;;
    "lookup-email")
        if [ -z "$2" ]; then
            echo "Error: Please provide an email address"
            show_help
            exit 1
        fi
        lookup_by_email $2
        ;;
    "top")
        show_top
        ;;
    "adjust")
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Error: Please provide user_id and amount"
            show_help
            exit 1
        fi
        adjust_points $2 $3
        ;;
    "stats")
        show_stats
        ;;
    *)
        show_help
        ;;
esac

